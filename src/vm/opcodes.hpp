#ifndef OPCODES
#define OPCODES

#include <cstdint>

enum class Opcode : uint16_t {
    // General
    skip            = 0x0000,
    halt            = 0x0001,
    dump            = 0x0002,
    print           = 0x0003,
    exit            = 0x0004,
    args            = 0x0005,
    newthread       = 0x0006,
    rnewthread      = 0x0007,
    gload           = 0x0117,
    gstore          = 0x0118,
    // References  
    null            = 0x0008,
    getfield        = 0x0009,
    setfield        = 0x000A,
    getstatic       = 0x000B,
    setstatic       = 0x000C,
    invoke          = 0x000D,
    invokevirtual   = 0x000E,
    invokereference = 0x000F,
    invokestatic    = 0x0010,
    invokeinterface = 0x0011,
    cast            = 0x0012,
    ret             = 0x0013,
    // Constant Pools
    cload_0         = 0x0014,
    cload_1         = 0x0015,
    cload_2         = 0x0016,
    cload_3         = 0x0017,
    cload           = 0x0018,
    // Local Variables
    rload_0         = 0x0019,
    rload_1         = 0x001A,
    rload_2         = 0x001B,
    rload_3         = 0x001C,
    rload           = 0x001D,
    rstore_0        = 0x001E,
    rstore_1        = 0x001F,
    rstore_2        = 0x0020,
    rstore_3        = 0x0021,
    rstore          = 0x0022,
    i8load          = 0x0023,
    i8store         = 0x0024,
    i16load         = 0x0025,
    i16store        = 0x0026,
    i32load         = 0x0027,
    i32store        = 0x0028,
    i64load         = 0x0029,
    i64store        = 0x002A,
    u8load          = 0x002B,
    u8store         = 0x002C,
    u16load         = 0x002D,
    u16store        = 0x002E,
    u32load         = 0x002F,
    u32store        = 0x0030,
    u64load         = 0x0031,
    u64store        = 0x0032,
    f32load         = 0x0033,
    f32store        = 0x0034,
    f64load         = 0x0035,
    f64store        = 0x0036,
    bload           = 0x0037,
    bstore          = 0x0038,
    c16load         = 0x0039,
    c16store        = 0x003A,
    incl            = 0x003B,
    decr            = 0x003C,
    // Compare - Numbers
    cmpi8           = 0x003D,
    cmpi16          = 0x003E,
    cmpi32          = 0x003F,
    cmpi64          = 0x0040,
    cmpu8           = 0x0041,
    cmpu16          = 0x0042,
    cmpu32          = 0x0043,
    cmpu64          = 0x0044,
    cmpf32          = 0x0045,
    cmpf64          = 0x0046,
    // Compare - Other
    cmpstr          = 0x0047,
    cmpstrd         = 0x0048,
    cmpstrl         = 0x0049,
    cmpref          = 0x004A,
    cmparr          = 0x004B,
    cmparrl         = 0x004C,
    cmpbool         = 0x004D,
    // Checking 
    isnan           = 0x004E,
    isobj           = 0x004F,
    isnull          = 0x0050,
    // Stack 
    dup             = 0x0051,
    swap            = 0x0052,
    pop             = 0x0053,
    // String 
    strlen          = 0x0054,
    strsub          = 0x0055,
    strconcat       = 0x0056,
    // Array 
    arrnew          = 0x0057,
    arrnewmulti     = 0x0058,
    arrnewa         = 0x0059,
    arrnewamulti    = 0x005A,
    arrlen          = 0x005B,
    arrget          = 0x005C,
    arrset          = 0x005D,
    // Control  
    jmp             = 0x005E,
    jmpeq           = 0x005F,
    jmpneq          = 0x0060,
    jmplt           = 0x0061,
    jmpgt           = 0x0062,
    jmplte          = 0x0063,
    jmpgte          = 0x0064,
    jmpo            = 0x0065,
    jmpoeq          = 0x0066,
    jmponeq         = 0x0067,
    jmpolt          = 0x0068,
    jmpogt          = 0x0069,
    jmpolte         = 0x006A,
    jmpogte         = 0x006B,
    ifnull          = 0x006C,
    ifnotnull       = 0x006D,
    tswitch         = 0x006E,
    lswitch         = 0x006F,
    // Arithmetic  
    addi8           = 0x0070,
    subi8           = 0x0071,
    muli8           = 0x0072,
    divi8           = 0x0073,
    modi8           = 0x0074,
    addi16          = 0x0075,
    subi16          = 0x0076,
    muli16          = 0x0077,
    divi16          = 0x0078,
    modi16          = 0x0079,
    addi32          = 0x007A,
    subi32          = 0x007B,
    muli32          = 0x007C,
    divi32          = 0x007D,
    modi32          = 0x007E,
    addi64          = 0x007F,
    subi64          = 0x0080,
    muli64          = 0x0081,
    divi64          = 0x0082,
    modi64          = 0x0083,
    addu8           = 0x0084,
    subu8           = 0x0085,
    mulu8           = 0x0086,
    divu8           = 0x0087,
    modu8           = 0x0088,
    addu16          = 0x0089,
    subu16          = 0x008A,
    mulu16          = 0x008B,
    divu16          = 0x008C,
    modu16          = 0x008D,
    addu32          = 0x008E,
    subu32          = 0x008F,
    mulu32          = 0x0090,
    divu32          = 0x0091,
    modu32          = 0x0092,
    addu64          = 0x0093,
    subu64          = 0x0094,
    mulu64          = 0x0095,
    divu64          = 0x0096,
    modu64          = 0x0097,
    addf32          = 0x0098,
    subf32          = 0x0099,
    mulf32          = 0x009A,
    divf32          = 0x009B,
    modf32          = 0x009C,
    addf64          = 0x009D,
    subf64          = 0x009E,
    mulf64          = 0x009F,
    divf64          = 0x00A0,
    modf64          = 0x00A1,
    // Conversion  
    i8toi16         = 0x00A2,
    i8toi32         = 0x00A3,
    i8toi64         = 0x00A4,
    i8tof32         = 0x00A5,
    i8tof64         = 0x00A6,
    i16toi8         = 0x00A7,
    i16toi32        = 0x00A8,
    i16toi64        = 0x00A9,
    i16tof32        = 0x00AA,
    i16tof64        = 0x00AB,
    i32toi8         = 0x00AC,
    i32toi16        = 0x00AD,
    i32toi64        = 0x00AE,
    i32tof32        = 0x00AF,
    i32tof64        = 0x00B0,
    i64toi8         = 0x00B1,
    i64toi16        = 0x00B2,
    i64toi32        = 0x00B3,
    i64tof32        = 0x00B4,
    i64tof64        = 0x00B5,
    f32toi8         = 0x00B6,
    f32toi16        = 0x00B7,
    f32toi32        = 0x00B8,
    f32toi64        = 0x00B9,
    f32tof64        = 0x00BA,
    f64toi8         = 0x00BB,
    f64toi16        = 0x00BC,
    f64toi32        = 0x00BD,
    f64toi64        = 0x00BE,
    f64tof32        = 0x00BF,
    i32toc16        = 0x00C0,
    c16toi32        = 0x00C1,
    // Conversion (Unsigned)
    u8toi8          = 0x00C2,
    u8toi16         = 0x00C3,
    u8toi32         = 0x00C4,
    u8toi64         = 0x00C5,
    u8tof32         = 0x00C6,
    u8tof64         = 0x00C7,
    u16toi8         = 0x00C8,
    u16toi16        = 0x00C9,
    u16toi32        = 0x00CA,
    u16toi64        = 0x00CB,
    u16tof32        = 0x00CC,
    u16tof64        = 0x00CD,
    u32toi8         = 0x00CE,
    u32toi16        = 0x00CF,
    u32toi32        = 0x00D0,
    u32toi64        = 0x00D1,
    u32tof32        = 0x00D2,
    u32tof64        = 0x00D3,
    u64toi8         = 0x00D4,
    u64toi16        = 0x00D5,
    u64toi32        = 0x00D6,
    u64toi64        = 0x00D7,
    u64tof32        = 0x00D8,
    u64tof64        = 0x00D9,
    // Negation   
    negi8           = 0x00DA,
    negi16          = 0x00DB,
    negi32          = 0x00DC,
    negi64          = 0x00DD,
    negu8           = 0x00DE,
    negu16          = 0x00DF,
    negu32          = 0x00E0,
    negu64          = 0x00E1,
    negf32          = 0x00E2,
    negf64          = 0x00E3,
    // Bitwise   
    andi8           = 0x00E4,
    andi16          = 0x00E5,
    andi32          = 0x00E6,
    andi64          = 0x00E7,
    andu8           = 0x00E8,
    andu16          = 0x00E9,
    andu32          = 0x00EA,
    andu64          = 0x00EB,
    ori8            = 0x00EC,
    ori16           = 0x00ED,
    ori32           = 0x00EE,
    ori64           = 0x00EF,
    oru8            = 0x00F0,
    oru16           = 0x00F1,
    oru32           = 0x00F2,
    oru64           = 0x00F3,
    xori8           = 0x00F4,
    xori16          = 0x00F5,
    xori32          = 0x00F6,
    xori64          = 0x00F7,
    xoru8           = 0x00F8,
    xoru16          = 0x00F9,
    xoru32          = 0x00FA,
    xoru64          = 0x00FB,
    noti8           = 0x00FC,
    noti16          = 0x00FD,
    noti32          = 0x00FE,
    noti64          = 0x00FF,
    notu8           = 0x0100,
    notu16          = 0x0101,
    notu32          = 0x0102,
    notu64          = 0x0103,
    shli8           = 0x0104,
    shli16          = 0x0105,
    shli32          = 0x0106,
    shli64          = 0x0107,
    shri8           = 0x0108,
    shri16          = 0x0109,
    shri32          = 0x010A,
    shri64          = 0x010B,
    shru8           = 0x010C,
    shru16          = 0x010D,
    shru32          = 0x010E,
    shru64          = 0x010F,
    // Object Creation
    op_new          = 0x0110,
    // Exception Handling
    op_throw        = 0x0111,
    op_catch        = 0x0112,
    // Function Definition
    defun           = 0x0113,
    closure         = 0x0114,
    // Synchronization
    lock            = 0x0115,
    unlock          = 0x0116
};

#endif